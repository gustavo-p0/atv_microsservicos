const axios = require('axios');

class MicroservicesClient {
  constructor(gatewayUrl = 'http://localhost:3000') {
    this.gatewayUrl = gatewayUrl;
    this.authToken = null;
    this.user = null;
    
    this.api = axios.create({
      baseURL: gatewayUrl,
      timeout: 10000
    });

    // Interceptor para adicionar token automaticamente
    this.api.interceptors.request.use(config => {
      if (this.authToken) {
        config.headers.Authorization = `Bearer ${this.authToken}`;
      }
      return config;
    });
  }

  // Registrar usu√°rio
  async register(userData) {
    try {
      console.log('\nüìù Registrando usu√°rio...');
      const response = await this.api.post('/api/auth/register', userData);
      
      if (response.data.success) {
        this.authToken = response.data.data.token;
        this.user = response.data.data.user;
        console.log(`‚úÖ Usu√°rio registrado: ${this.user.username}`);
        return response.data;
      } else {
        throw new Error(response.data.message || 'Falha no registro');
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro no registro: ${message}`);
      throw error;
    }
  }

  // Fazer login
  async login(credentials) {
    try {
      console.log('\nüîê Fazendo login...');
      const response = await this.api.post('/api/auth/login', credentials);
      
      if (response.data.success) {
        this.authToken = response.data.data.token;
        this.user = response.data.data.user;
        console.log(`‚úÖ Login realizado: ${this.user.username}`);
        return response.data;
      } else {
        throw new Error(response.data.message || 'Falha no login');
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro no login: ${message}`);
      throw error;
    }
  }

  // Buscar itens
  async getItems(filters = {}) {
    try {
      console.log('\nüõí Buscando itens...');
      const response = await this.api.get('/api/items', { params: filters });
      
      if (response.data.success) {
        const items = response.data.data;
        console.log(`‚úÖ Encontrados ${items.length} itens`);
        items.slice(0, 5).forEach((item, index) => {
          console.log(`   ${index + 1}. ${item.name} - R$ ${item.averagePrice} (${item.category})`);
        });
        return response.data;
      } else {
        console.log('‚ùå Resposta inv√°lida do servidor');
        return { data: [] };
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro ao buscar itens: ${message}`);
      return { data: [] };
    }
  }

  // Buscar categorias
  async getCategories() {
    try {
      console.log('\nüìÇ Buscando categorias...');
      const response = await this.api.get('/api/items/categories');
      
      if (response.data.success) {
        const categories = response.data.data;
        console.log(`‚úÖ Encontradas ${categories.length} categorias`);
        categories.forEach((category, index) => {
          console.log(`   ${index + 1}. ${category.name} - ${category.itemCount} itens`);
        });
        return response.data;
      } else {
        console.log('‚ùå Resposta inv√°lida do servidor');
        return { data: [] };
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro ao buscar categorias: ${message}`);
      return { data: [] };
    }
  }

  // Criar lista de compras
  async createList(listData) {
    try {
      console.log('\nüìù Criando lista de compras...');
      
      if (!this.authToken) {
        throw new Error('Token de autentica√ß√£o necess√°rio');
      }

      const response = await this.api.post('/api/lists', listData);
      
      if (response.data.success) {
        console.log(`‚úÖ Lista criada: ${response.data.data.name}`);
        return response.data;
      } else {
        throw new Error(response.data.message || 'Falha na cria√ß√£o da lista');
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro ao criar lista: ${message}`);
      throw error;
    }
  }

  // Adicionar item √† lista
  async addItemToList(listId, itemId, quantity = 1) {
    try {
      console.log(`\n‚ûï Adicionando item √† lista ${listId}...`);
      
      if (!this.authToken) {
        throw new Error('Token de autentica√ß√£o necess√°rio');
      }

      const response = await this.api.post(`/api/lists/${listId}/items`, {
        itemId,
        quantity
      });
      
      if (response.data.success) {
        console.log(`‚úÖ Item adicionado √† lista`);
        return response.data;
      } else {
        throw new Error(response.data.message || 'Falha ao adicionar item');
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro ao adicionar item: ${message}`);
      throw error;
    }
  }

  // Buscar listas do usu√°rio
  async getLists() {
    try {
      console.log('\nüìã Buscando listas do usu√°rio...');
      
      if (!this.authToken) {
        throw new Error('Token de autentica√ß√£o necess√°rio');
      }

      const response = await this.api.get('/api/lists');
      
      if (response.data.success) {
        const lists = response.data.data;
        console.log(`‚úÖ Encontradas ${lists.length} listas`);
        lists.forEach((list, index) => {
          console.log(`   ${index + 1}. ${list.name} - ${list.summary.totalItems} itens (${list.status})`);
        });
        return response.data;
      } else {
        throw new Error(response.data.message || 'Falha ao buscar listas');
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro ao buscar listas: ${message}`);
      throw error;
    }
  }

  // Dashboard agregado
  async getDashboard() {
    try {
      console.log('\nüìä Buscando dashboard...');
      
      if (!this.authToken) {
        throw new Error('Token de autentica√ß√£o necess√°rio para o dashboard');
      }

      const response = await this.api.get('/api/dashboard');
      
      if (response.data.success) {
        const dashboard = response.data.data;
        console.log('‚úÖ Dashboard carregado:');
        console.log(`   Timestamp: ${dashboard.timestamp}`);
        console.log(`   Arquitetura: ${dashboard.architecture}`);
        console.log(`   Banco de Dados: ${dashboard.database_approach}`);
        console.log(`   Status dos Servi√ßos:`);
        
        if (dashboard.services_status) {
          Object.entries(dashboard.services_status).forEach(([serviceName, serviceInfo]) => {
            const status = serviceInfo.healthy ? '‚úÖ SAUD√ÅVEL' : '‚ùå INDISPON√çVEL';
            console.log(`     ${serviceName}: ${status}`);
          });
        }

        console.log(`   Usu√°rios dispon√≠veis: ${dashboard.data?.users?.available ? 'Sim' : 'N√£o'}`);
        console.log(`   Itens dispon√≠veis: ${dashboard.data?.items?.available ? 'Sim' : 'N√£o'}`);
        console.log(`   Categorias dispon√≠veis: ${dashboard.data?.categories?.available ? 'Sim' : 'N√£o'}`);
        
        return response.data;
      } else {
        throw new Error(response.data.message || 'Falha ao carregar dashboard');
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro ao buscar dashboard: ${message}`);
      throw error;
    }
  }

  // Busca global
  async search(query) {
    try {
      console.log(`\nüîç Buscando por: "${query}"`);
      const response = await this.api.get('/api/search', { params: { q: query } });
      
      if (response.data.success) {
        const results = response.data.data;
        console.log(`‚úÖ Resultados para "${results.query}":`);
        
        if (results.items?.available) {
          console.log(`   Itens encontrados: ${results.items.count}`);
          results.items.results.slice(0, 3).forEach((item, index) => {
            console.log(`     ${index + 1}. ${item.name} - R$ ${item.averagePrice} (${item.category})`);
          });
        } else {
          console.log('   Servi√ßo de itens indispon√≠vel');
        }
        
        return response.data;
      } else {
        throw new Error(response.data.message || 'Falha na busca');
      }
    } catch (error) {
      const message = error.response?.data?.message || error.message;
      console.log(`‚ùå Erro na busca: ${message}`);
      throw error;
    }
  }

  // Verificar sa√∫de dos servi√ßos
  async checkHealth() {
    try {
      console.log('\n‚ù§Ô∏è  Verificando sa√∫de dos servi√ßos...');
      
      const [gatewayHealth, registryInfo] = await Promise.allSettled([
        this.api.get('/health'),
        this.api.get('/registry')
      ]);

      if (gatewayHealth.status === 'fulfilled') {
        const health = gatewayHealth.value.data;
        console.log('‚úÖ API Gateway: healthy');
        console.log(`   Arquitetura: ${health.architecture}`);
        
        if (registryInfo.status === 'fulfilled') {
          const services = registryInfo.value.data.services;
          console.log('   Servi√ßos registrados:');
          
          Object.entries(services).forEach(([name, info]) => {
            const status = info.healthy ? '‚úÖ SAUD√ÅVEL' : '‚ùå INDISPON√çVEL';
            console.log(`     ${name}: ${status} (${info.url})`);
          });
        } else {
          console.log('   ‚ùå Erro ao buscar registry:', registryInfo.reason?.message);
        }
      } else {
        console.log('‚ùå API Gateway indispon√≠vel:', gatewayHealth.reason?.message);
      }
      
      return { gatewayHealth, registryInfo };
    } catch (error) {
      console.log(`‚ùå Erro ao verificar sa√∫de: ${error.message}`);
      throw error;
    }
  }

  // Demonstra√ß√£o completa
  async runDemo() {
    console.log('=====================================');
    console.log('üéØ Demo: Sistema de Listas de Compras');
    console.log('   Microsservi√ßos com TypeScript');
    console.log('=====================================');

    try {
      // 1. Verificar sa√∫de dos servi√ßos
      await this.checkHealth();
      await this.delay(2000);

      // 2. Registrar usu√°rio
      const uniqueId = Date.now();
      const userData = {
        email: `demo${uniqueId}@microservices.com`,
        username: `demo${uniqueId}`,
        password: 'demo123456',
        firstName: 'Demo',
        lastName: 'User',
        preferences: {
          defaultStore: 'Supermercado Demo',
          currency: 'BRL'
        }
      };

      let authSuccessful = false;
      try {
        await this.register(userData);
        authSuccessful = true;
      } catch (error) {
        console.log('\nüîÑ Tentando login com usu√°rio existente...');
        try {
          await this.login({
            identifier: userData.email,
            password: userData.password
          });
          authSuccessful = true;
        } catch (loginError) {
          console.log('‚ùå Login falhou, continuando sem autentica√ß√£o...');
          authSuccessful = false;
        }
      }

      await this.delay(1000);

      // 3. Buscar itens
      await this.getItems({ limit: '10' });
      await this.delay(1000);

      // 4. Buscar categorias
      await this.getCategories();
      await this.delay(1000);

      // 5. Fazer busca
      await this.search('arroz');
      await this.delay(1000);

      // 6. Se autenticado, fazer opera√ß√µes que requerem auth
      if (authSuccessful && this.authToken) {
        // Buscar dashboard
        try {
          await this.getDashboard();
          await this.delay(1000);
        } catch (error) {
          console.log('‚ùå Dashboard n√£o dispon√≠vel:', error.message);
        }

        // Criar lista de compras
        try {
          const newList = await this.createList({
            name: 'Lista Demo',
            description: 'Lista de demonstra√ß√£o do sistema'
          });

          if (newList.success) {
            const listId = newList.data.id;
            console.log(`üìù Lista criada com ID: ${listId}`);
            
            // Adicionar alguns itens √† lista
            await this.delay(1000);
            
            try {
              // Buscar alguns itens para adicionar
              const itemsResponse = await this.getItems({ limit: '3' });
              if (itemsResponse.data && itemsResponse.data.length > 0) {
                for (let i = 0; i < Math.min(2, itemsResponse.data.length); i++) {
                  const item = itemsResponse.data[i];
                  await this.addItemToList(listId, item.id, 1);
                  await this.delay(500);
                }
              }
            } catch (error) {
              console.log('‚ùå Erro ao adicionar itens:', error.message);
            }
          }
        } catch (error) {
          console.log('‚ùå Cria√ß√£o de lista falhou:', error.message);
        }

        // Buscar listas do usu√°rio
        try {
          await this.getLists();
        } catch (error) {
          console.log('‚ùå Busca de listas falhou:', error.message);
        }
      } else {
        console.log('\n‚ö†Ô∏è  Opera√ß√µes autenticadas puladas (sem token v√°lido)');
      }

      console.log('\n=====================================');
      console.log('üéâ Demonstra√ß√£o conclu√≠da com sucesso!');
      console.log('=====================================');
      console.log('Padr√µes demonstrados:');
      console.log('   ‚úÖ Service Discovery via Registry');
      console.log('   ‚úÖ API Gateway com roteamento');
      console.log('   ‚úÖ Circuit Breaker pattern');
      console.log('   ‚úÖ Comunica√ß√£o inter-service');
      console.log('   ‚úÖ Endpoints agregados');
      console.log('   ‚úÖ Health checks distribu√≠dos');
      console.log('   ‚úÖ Database per Service (NoSQL)');
      console.log('   ‚úÖ JSON-based document storage');
      console.log('   ‚úÖ TypeScript em todos os servi√ßos');
      console.log('   ‚úÖ Autentica√ß√£o JWT distribu√≠da');

    } catch (error) {
      console.error('‚ùå Erro na demonstra√ß√£o:', error.message);
      console.log('\nüîß Verifique se todos os servi√ßos est√£o rodando:');
      console.log('   User Service: http://localhost:3001/health');
      console.log('   Item Service: http://localhost:3002/health');
      console.log('   List Service: http://localhost:3003/health');
      console.log('   API Gateway: http://localhost:3000/health');
    }
  }

  // Helper para delay
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Executar demonstra√ß√£o
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log('Uso: node client-demo.js [op√ß√µes]');
    console.log('');
    console.log('Op√ß√µes:');
    console.log('  --health    Verificar apenas sa√∫de dos servi√ßos');
    console.log('  --items     Listar apenas itens');
    console.log('  --search    Fazer busca (requer termo: --search=termo)');
    console.log('  --help      Mostrar esta ajuda');
    console.log('');
    console.log('Sem argumentos: Executar demonstra√ß√£o completa');
    return;
  }

  const client = new MicroservicesClient();
  
  try {
    if (args.includes('--health')) {
      await client.checkHealth();
    } else if (args.includes('--items')) {
      await client.getItems();
    } else if (args.some(arg => arg.startsWith('--search'))) {
      const searchArg = args.find(arg => arg.startsWith('--search'));
      const searchTerm = searchArg.includes('=') ? searchArg.split('=')[1] : 'arroz';
      await client.search(searchTerm);
    } else {
      // Demonstra√ß√£o completa
      await client.runDemo();
    }
  } catch (error) {
    console.error('‚ùå Erro na execu√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erro cr√≠tico:', error.message);
    process.exit(1);
  });
}

module.exports = MicroservicesClient;
